// Code generated by protoc-gen-go. DO NOT EDIT.
// source: revtc.proto

/*
Package revtc is a generated protocol buffer package.

It is generated from these files:
	revtc.proto

It has these top-level messages:
	Address
	PersonName
	Individual
	Company
	VTCEntry
	SimpleInput
*/
package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PERSON_TITLE int32

const (
	PERSON_TITLE_PERSON_TITLE_OTHER PERSON_TITLE = 0
	PERSON_TITLE_PERSON_TITLE_MR    PERSON_TITLE = 1
	PERSON_TITLE_PERSON_TITLE_MRS   PERSON_TITLE = 2
)

var PERSON_TITLE_name = map[int32]string{
	0: "PERSON_TITLE_OTHER",
	1: "PERSON_TITLE_MR",
	2: "PERSON_TITLE_MRS",
}
var PERSON_TITLE_value = map[string]int32{
	"PERSON_TITLE_OTHER": 0,
	"PERSON_TITLE_MR":    1,
	"PERSON_TITLE_MRS":   2,
}

func (x PERSON_TITLE) String() string {
	return proto.EnumName(PERSON_TITLE_name, int32(x))
}
func (PERSON_TITLE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LEGAL_ENTITY_TYPE int32

const (
	LEGAL_ENTITY_TYPE_LEGAL_ENTITY_TYPE_OTHER      LEGAL_ENTITY_TYPE = 0
	LEGAL_ENTITY_TYPE_LEGAL_ENTITY_TYPE_COMPANY    LEGAL_ENTITY_TYPE = 1
	LEGAL_ENTITY_TYPE_LEGAL_ENTITY_TYPE_INDIVIDUAL LEGAL_ENTITY_TYPE = 2
)

var LEGAL_ENTITY_TYPE_name = map[int32]string{
	0: "LEGAL_ENTITY_TYPE_OTHER",
	1: "LEGAL_ENTITY_TYPE_COMPANY",
	2: "LEGAL_ENTITY_TYPE_INDIVIDUAL",
}
var LEGAL_ENTITY_TYPE_value = map[string]int32{
	"LEGAL_ENTITY_TYPE_OTHER":      0,
	"LEGAL_ENTITY_TYPE_COMPANY":    1,
	"LEGAL_ENTITY_TYPE_INDIVIDUAL": 2,
}

func (x LEGAL_ENTITY_TYPE) String() string {
	return proto.EnumName(LEGAL_ENTITY_TYPE_name, int32(x))
}
func (LEGAL_ENTITY_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BUSINESS_ENTITY_TYPE int32

const (
	BUSINESS_ENTITY_TYPE_BUSINESS_ENTITY_TYPE_OTHER BUSINESS_ENTITY_TYPE = 0
	BUSINESS_ENTITY_TYPE_BUSINESS_ENTITY_TYPE_SA    BUSINESS_ENTITY_TYPE = 1
	BUSINESS_ENTITY_TYPE_BUSINESS_ENTITY_TYPE_SARL  BUSINESS_ENTITY_TYPE = 2
	BUSINESS_ENTITY_TYPE_BUSINESS_ENTITY_TYPE_SAS   BUSINESS_ENTITY_TYPE = 3
	BUSINESS_ENTITY_TYPE_BUSINESS_ENTITY_TYPE_SASU  BUSINESS_ENTITY_TYPE = 4
	BUSINESS_ENTITY_TYPE_BUSINESS_ENTITY_TYPE_EURL  BUSINESS_ENTITY_TYPE = 5
)

var BUSINESS_ENTITY_TYPE_name = map[int32]string{
	0: "BUSINESS_ENTITY_TYPE_OTHER",
	1: "BUSINESS_ENTITY_TYPE_SA",
	2: "BUSINESS_ENTITY_TYPE_SARL",
	3: "BUSINESS_ENTITY_TYPE_SAS",
	4: "BUSINESS_ENTITY_TYPE_SASU",
	5: "BUSINESS_ENTITY_TYPE_EURL",
}
var BUSINESS_ENTITY_TYPE_value = map[string]int32{
	"BUSINESS_ENTITY_TYPE_OTHER": 0,
	"BUSINESS_ENTITY_TYPE_SA":    1,
	"BUSINESS_ENTITY_TYPE_SARL":  2,
	"BUSINESS_ENTITY_TYPE_SAS":   3,
	"BUSINESS_ENTITY_TYPE_SASU":  4,
	"BUSINESS_ENTITY_TYPE_EURL":  5,
}

func (x BUSINESS_ENTITY_TYPE) String() string {
	return proto.EnumName(BUSINESS_ENTITY_TYPE_name, int32(x))
}
func (BUSINESS_ENTITY_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Address struct {
	PostalCode string `protobuf:"bytes,1,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	City       string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	Country    string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	Department string `protobuf:"bytes,4,opt,name=department" json:"department,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetDepartment() string {
	if m != nil {
		return m.Department
	}
	return ""
}

type PersonName struct {
	LastName  string `protobuf:"bytes,1,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
}

func (m *PersonName) Reset()                    { *m = PersonName{} }
func (m *PersonName) String() string            { return proto.CompactTextString(m) }
func (*PersonName) ProtoMessage()               {}
func (*PersonName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PersonName) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *PersonName) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

type Individual struct {
	Title PERSON_TITLE `protobuf:"varint,1,opt,name=title,enum=revtc.PERSON_TITLE" json:"title,omitempty"`
	Name  *PersonName  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Individual) Reset()                    { *m = Individual{} }
func (m *Individual) String() string            { return proto.CompactTextString(m) }
func (*Individual) ProtoMessage()               {}
func (*Individual) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Individual) GetTitle() PERSON_TITLE {
	if m != nil {
		return m.Title
	}
	return PERSON_TITLE_PERSON_TITLE_OTHER
}

func (m *Individual) GetName() *PersonName {
	if m != nil {
		return m.Name
	}
	return nil
}

type Company struct {
	Name        string               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Acronym     string               `protobuf:"bytes,2,opt,name=acronym" json:"acronym,omitempty"`
	Brand       string               `protobuf:"bytes,3,opt,name=brand" json:"brand,omitempty"`
	Contact     *PersonName          `protobuf:"bytes,4,opt,name=contact" json:"contact,omitempty"`
	CompanyType BUSINESS_ENTITY_TYPE `protobuf:"varint,5,opt,name=company_type,json=companyType,enum=revtc.BUSINESS_ENTITY_TYPE" json:"company_type,omitempty"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetAcronym() string {
	if m != nil {
		return m.Acronym
	}
	return ""
}

func (m *Company) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *Company) GetContact() *PersonName {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *Company) GetCompanyType() BUSINESS_ENTITY_TYPE {
	if m != nil {
		return m.CompanyType
	}
	return BUSINESS_ENTITY_TYPE_BUSINESS_ENTITY_TYPE_OTHER
}

type VTCEntry struct {
	LegalEntityType    LEGAL_ENTITY_TYPE          `protobuf:"varint,1,opt,name=legal_entity_type,json=legalEntityType,enum=revtc.LEGAL_ENTITY_TYPE" json:"legal_entity_type,omitempty"`
	CompanyNumber      string                     `protobuf:"bytes,2,opt,name=company_number,json=companyNumber" json:"company_number,omitempty"`
	RegistrationNumber string                     `protobuf:"bytes,3,opt,name=registration_number,json=registrationNumber" json:"registration_number,omitempty"`
	ExpirationDate     *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`
	Address            *Address                   `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	Individual         *Individual                `protobuf:"bytes,6,opt,name=individual" json:"individual,omitempty"`
	Company            *Company                   `protobuf:"bytes,7,opt,name=company" json:"company,omitempty"`
}

func (m *VTCEntry) Reset()                    { *m = VTCEntry{} }
func (m *VTCEntry) String() string            { return proto.CompactTextString(m) }
func (*VTCEntry) ProtoMessage()               {}
func (*VTCEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VTCEntry) GetLegalEntityType() LEGAL_ENTITY_TYPE {
	if m != nil {
		return m.LegalEntityType
	}
	return LEGAL_ENTITY_TYPE_LEGAL_ENTITY_TYPE_OTHER
}

func (m *VTCEntry) GetCompanyNumber() string {
	if m != nil {
		return m.CompanyNumber
	}
	return ""
}

func (m *VTCEntry) GetRegistrationNumber() string {
	if m != nil {
		return m.RegistrationNumber
	}
	return ""
}

func (m *VTCEntry) GetExpirationDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpirationDate
	}
	return nil
}

func (m *VTCEntry) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *VTCEntry) GetIndividual() *Individual {
	if m != nil {
		return m.Individual
	}
	return nil
}

func (m *VTCEntry) GetCompany() *Company {
	if m != nil {
		return m.Company
	}
	return nil
}

type SimpleInput struct {
	Input string `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
}

func (m *SimpleInput) Reset()                    { *m = SimpleInput{} }
func (m *SimpleInput) String() string            { return proto.CompactTextString(m) }
func (*SimpleInput) ProtoMessage()               {}
func (*SimpleInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SimpleInput) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func init() {
	proto.RegisterType((*Address)(nil), "revtc.Address")
	proto.RegisterType((*PersonName)(nil), "revtc.PersonName")
	proto.RegisterType((*Individual)(nil), "revtc.Individual")
	proto.RegisterType((*Company)(nil), "revtc.Company")
	proto.RegisterType((*VTCEntry)(nil), "revtc.VTCEntry")
	proto.RegisterType((*SimpleInput)(nil), "revtc.SimpleInput")
	proto.RegisterEnum("revtc.PERSON_TITLE", PERSON_TITLE_name, PERSON_TITLE_value)
	proto.RegisterEnum("revtc.LEGAL_ENTITY_TYPE", LEGAL_ENTITY_TYPE_name, LEGAL_ENTITY_TYPE_value)
	proto.RegisterEnum("revtc.BUSINESS_ENTITY_TYPE", BUSINESS_ENTITY_TYPE_name, BUSINESS_ENTITY_TYPE_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ReVTC service

type ReVTCClient interface {
	GetBySIREN(ctx context.Context, in *SimpleInput, opts ...grpc.CallOption) (*VTCEntry, error)
}

type reVTCClient struct {
	cc *grpc.ClientConn
}

func NewReVTCClient(cc *grpc.ClientConn) ReVTCClient {
	return &reVTCClient{cc}
}

func (c *reVTCClient) GetBySIREN(ctx context.Context, in *SimpleInput, opts ...grpc.CallOption) (*VTCEntry, error) {
	out := new(VTCEntry)
	err := grpc.Invoke(ctx, "/revtc.ReVTC/GetBySIREN", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReVTC service

type ReVTCServer interface {
	GetBySIREN(context.Context, *SimpleInput) (*VTCEntry, error)
}

func RegisterReVTCServer(s *grpc.Server, srv ReVTCServer) {
	s.RegisterService(&_ReVTC_serviceDesc, srv)
}

func _ReVTC_GetBySIREN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReVTCServer).GetBySIREN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/revtc.ReVTC/GetBySIREN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReVTCServer).GetBySIREN(ctx, req.(*SimpleInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReVTC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "revtc.ReVTC",
	HandlerType: (*ReVTCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBySIREN",
			Handler:    _ReVTC_GetBySIREN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "revtc.proto",
}

func init() { proto.RegisterFile("revtc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x6d, 0x4f, 0xe2, 0x4c,
	0x14, 0x15, 0x04, 0xd1, 0x8b, 0x0f, 0xd4, 0xd1, 0x3c, 0xf6, 0x01, 0xdf, 0xc2, 0x13, 0x13, 0xd7,
	0x4d, 0x30, 0x8b, 0x5f, 0x37, 0x9b, 0x20, 0x34, 0xda, 0x04, 0x2b, 0x3b, 0x2d, 0x26, 0x7e, 0xd9,
	0x66, 0xa0, 0x23, 0x69, 0xd2, 0xb7, 0x6d, 0x07, 0x63, 0xff, 0xda, 0xfe, 0x88, 0xfd, 0x35, 0xfb,
	0x03, 0x36, 0x9d, 0x99, 0x22, 0x2c, 0xb8, 0xdf, 0x7a, 0xcf, 0xb9, 0xf7, 0xcc, 0xcc, 0xb9, 0xa7,
	0x50, 0x8d, 0xe9, 0x0b, 0x9b, 0xb4, 0xa3, 0x38, 0x64, 0x21, 0x2a, 0xf3, 0xa2, 0x71, 0x3a, 0x0d,
	0xc3, 0xa9, 0x47, 0xaf, 0x38, 0x38, 0x9e, 0x3d, 0x5f, 0x31, 0xd7, 0xa7, 0x09, 0x23, 0x7e, 0x24,
	0xfa, 0x5a, 0xaf, 0x50, 0xe9, 0x3a, 0x4e, 0x4c, 0x93, 0x04, 0x9d, 0x42, 0x35, 0x0a, 0x13, 0x46,
	0x3c, 0x7b, 0x12, 0x3a, 0x54, 0x2d, 0x9c, 0x15, 0x2e, 0x76, 0x30, 0x08, 0xa8, 0x17, 0x3a, 0x14,
	0x21, 0x28, 0x4d, 0x5c, 0x96, 0xaa, 0x45, 0xce, 0xf0, 0x6f, 0xa4, 0x42, 0x65, 0x12, 0xce, 0x02,
	0x16, 0xa7, 0xea, 0x26, 0x87, 0xf3, 0x12, 0x9d, 0x00, 0x38, 0x34, 0x22, 0x31, 0xf3, 0x69, 0xc0,
	0xd4, 0x92, 0x50, 0x7b, 0x43, 0x5a, 0x77, 0x00, 0x43, 0x1a, 0x27, 0x61, 0x60, 0x10, 0x9f, 0xa2,
	0x26, 0xec, 0x78, 0x24, 0x61, 0x76, 0x40, 0xfc, 0xfc, 0xe8, 0xed, 0x0c, 0xe0, 0xe4, 0x31, 0xc0,
	0xb3, 0x1b, 0xe7, 0xac, 0x38, 0x7e, 0x87, 0x23, 0x19, 0xdd, 0xfa, 0x06, 0xa0, 0x07, 0x8e, 0xfb,
	0xe2, 0x3a, 0x33, 0xe2, 0xa1, 0x0f, 0x50, 0x66, 0x2e, 0xf3, 0x84, 0x4a, 0xad, 0xb3, 0xdf, 0x16,
	0xb6, 0x0c, 0x35, 0x6c, 0x3e, 0x18, 0xb6, 0xa5, 0x5b, 0x03, 0x0d, 0x8b, 0x0e, 0x74, 0x0e, 0xa5,
	0xb9, 0x62, 0xb5, 0xb3, 0x97, 0x77, 0xce, 0x6f, 0x85, 0x39, 0xdd, 0xfa, 0x51, 0x80, 0x4a, 0x2f,
	0xf4, 0x23, 0x12, 0xa4, 0x99, 0x07, 0x0b, 0x57, 0xe4, 0xdf, 0x99, 0x07, 0x64, 0x12, 0x87, 0x41,
	0xea, 0xcb, 0xbb, 0xe5, 0x25, 0x3a, 0x80, 0xf2, 0x38, 0x26, 0x81, 0x23, 0xbd, 0x11, 0x05, 0xfa,
	0x98, 0x79, 0x16, 0x30, 0x32, 0x11, 0xb6, 0xac, 0x3d, 0x39, 0xef, 0x40, 0x5f, 0x60, 0x77, 0x22,
	0xce, 0xb6, 0x59, 0x1a, 0x51, 0xb5, 0xcc, 0x5f, 0xd5, 0x94, 0x13, 0x37, 0x23, 0x53, 0x37, 0x34,
	0xd3, 0xb4, 0x35, 0xc3, 0xd2, 0xad, 0x27, 0xdb, 0x7a, 0x1a, 0x6a, 0xb8, 0x2a, 0x07, 0xac, 0x34,
	0xa2, 0xad, 0x5f, 0x45, 0xd8, 0x7e, 0xb4, 0x7a, 0x1a, 0xdf, 0x49, 0x1f, 0xf6, 0x3c, 0x3a, 0x25,
	0x9e, 0x4d, 0x03, 0xe6, 0x32, 0xa9, 0x28, 0x7c, 0x52, 0xa5, 0xe2, 0x40, 0xbb, 0xed, 0x0e, 0x96,
	0xe4, 0xea, 0x7c, 0x44, 0xe3, 0x13, 0x99, 0x24, 0x3a, 0x87, 0x5a, 0x7e, 0xa5, 0x60, 0xe6, 0x8f,
	0x69, 0x2c, 0x9f, 0xfd, 0x8f, 0x44, 0x0d, 0x0e, 0xa2, 0x2b, 0xd8, 0x8f, 0xe9, 0xd4, 0x4d, 0x58,
	0x4c, 0x98, 0x1b, 0x06, 0x79, 0xaf, 0xb0, 0x02, 0x2d, 0x52, 0x72, 0xa0, 0x07, 0x75, 0xfa, 0x1a,
	0xb9, 0xb2, 0xdd, 0x21, 0x8c, 0x4a, 0x7f, 0x1a, 0x6d, 0x11, 0xe3, 0x76, 0x1e, 0xe3, 0xb6, 0x95,
	0xc7, 0x18, 0xd7, 0xde, 0x46, 0xfa, 0x84, 0x51, 0x74, 0x01, 0x15, 0x22, 0x02, 0xcd, 0xad, 0xaa,
	0x76, 0x6a, 0xf2, 0x61, 0x32, 0xe6, 0x38, 0xa7, 0xd1, 0x27, 0x00, 0x77, 0x1e, 0x1b, 0x75, 0x6b,
	0x69, 0x13, 0x6f, 0x79, 0xc2, 0x0b, 0x4d, 0x99, 0xb8, 0x7c, 0xa3, 0x5a, 0x59, 0x12, 0x97, 0xf1,
	0xc0, 0x39, 0xdd, 0xfa, 0x1f, 0xaa, 0xa6, 0xeb, 0x47, 0x1e, 0xd5, 0x83, 0x68, 0xc6, 0xb2, 0x20,
	0xb8, 0xd9, 0x87, 0xcc, 0x8d, 0x28, 0x2e, 0xbf, 0xc2, 0xee, 0x62, 0x2c, 0xd1, 0xbf, 0x80, 0x16,
	0x6b, 0xfb, 0xc1, 0xba, 0xd3, 0xb0, 0xb2, 0x81, 0xf6, 0xa1, 0xbe, 0x84, 0xdf, 0x63, 0xa5, 0x80,
	0x0e, 0x40, 0xf9, 0x03, 0x34, 0x95, 0xe2, 0xe5, 0x77, 0xd8, 0x5b, 0xd9, 0x20, 0x6a, 0xc2, 0xe1,
	0x0a, 0x38, 0x17, 0x3f, 0x86, 0xff, 0x56, 0xc9, 0xde, 0xc3, 0xfd, 0xb0, 0x6b, 0x3c, 0x29, 0x05,
	0x74, 0x06, 0x47, 0xab, 0xb4, 0x6e, 0xf4, 0xf5, 0x47, 0xbd, 0x3f, 0xea, 0x0e, 0x94, 0xe2, 0xe5,
	0xcf, 0x02, 0x1c, 0xac, 0xcb, 0x21, 0x3a, 0x81, 0xc6, 0x3a, 0x7c, 0x7e, 0x72, 0x13, 0x0e, 0xd7,
	0xf2, 0x66, 0x57, 0x29, 0x64, 0xd7, 0x7a, 0x87, 0xc4, 0x03, 0xa5, 0x88, 0x8e, 0x40, 0x7d, 0x87,
	0x36, 0x95, 0xcd, 0xbf, 0x0c, 0x9b, 0x23, 0xa5, 0xf4, 0x2e, 0xad, 0x8d, 0xf0, 0x40, 0x29, 0x77,
	0x3e, 0x43, 0x19, 0xd3, 0x47, 0xab, 0x87, 0xae, 0x01, 0x6e, 0x29, 0xbb, 0x49, 0x4d, 0x1d, 0x6b,
	0x06, 0x42, 0x72, 0xd7, 0x0b, 0x7b, 0x6d, 0xd4, 0x25, 0x96, 0xff, 0x61, 0xad, 0x8d, 0xf1, 0x16,
	0x0f, 0xe9, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x13, 0xb3, 0x11, 0x8f, 0x05, 0x00,
	0x00,
}
